{"version":3,"sources":["components/Button.js","components/Header.js","components/Task.js","components/Tasks.js","components/AddTask.js","App.js","reportWebVitals.js","index.js"],"names":["Button","color","text","onClick","style","backgroundColor","className","defaultProps","Header","title","onAdd","showAdd","Task","task","onDelete","onToggle","reminder","onDoubleClick","id","cursor","day","Tasks","tasks","map","AddTask","useState","setText","setDay","setReminder","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","checked","App","showAddTask","setShowAddTask","setTasks","Math","floor","random","newTask","length","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abc78ecb.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst Button = ({color, text, onClick}) => {\r\n  return (\r\n    <button\r\n    onClick={onClick} \r\n    style={{ backgroundColor: color}} \r\n    className='btn'>\r\n    {text}\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.defaultProps = {\r\n  color: 'steelblue',\r\n  backgroundColor: 'Black'\r\n}\r\n\r\nButton.propTypes = {\r\n  text: PropTypes.string,\r\n  color: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n}\r\n\r\nexport default Button;\r\n\r\n","import Button from './Button'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Header = ({title, onAdd, showAdd}) => {\r\n  return (\r\n    <header className='header'>\r\n      <h1>{title}</h1>\r\n      <Button \r\n      color='steelblue' \r\n      text={showAdd ? 'Close' : 'Open'}\r\n      onClick={onAdd} />\r\n    </header>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  title: 'Cloud Task Manager'\r\n}\r\n\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Header;\r\n","import {FaTimes} from 'react-icons/fa'\r\n\r\nconst Task = ({task, onDelete, onToggle}) => {\r\n  return (\r\n    <div className={`task ${task.reminder ? 'reminder' : ''}`} \r\n    onDoubleClick={() => onToggle(task.id)}>\r\n        <h3>\r\n         {task.text}{' '} \r\n         <FaTimes style={{color: 'steelblue', cursor: 'pointer'}} \r\n         onClick={() => onDelete(task.id)}\r\n          />\r\n         </h3>\r\n        <p>{task.day}</p>    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","import Task from './Task'\r\n\r\n// {tasks} is the same as props.tasks\r\nconst Tasks = ({tasks, onDelete, onToggle}) => {\r\n  return (\r\n    <>\r\n      {tasks.map((task) => (\r\n          <Task key={task.id} task={task} \r\n          onDelete={onDelete}\r\n          onToggle={onToggle} />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n\r\n\r\n","import {useState} from 'react'\r\n\r\n// component State \r\n\r\nconst AddTask = ({onAdd}) => {\r\n  // setN is the method to update state\r\n  const [text, setText] = useState('') // default is an empty string\r\n  const [day, setDay] = useState('') // default is an empty string\r\n  const [reminder, setReminder] = useState(false) // default is Boolean\r\n\r\n  // e (event) use target.value to get what is typed in.\r\n // for box use target.checked - as there is no value. - currentTarget.checked will not render correctly in DOM.\r\n// submission function \r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    // must be converted into turnary operators if possible \r\n    \r\n    if(!text) {\r\n      alert('Please add a task')\r\n      return\r\n    }\r\n\r\n    if (!day) {\r\n      alert('Please add a time')\r\n      return\r\n    }\r\n\r\n    onAdd({text, day, reminder})\r\n\r\n    setText('')\r\n    setDay(' ')\r\n    setReminder(false) // boolean default \r\n  }\r\n\r\n  // return of component \r\n\r\n  return (\r\n    <form className='add-form' onSubmit={onSubmit}>\r\n\r\n      <div className='form-control'>\r\n        <label>Task</label>\r\n        <input \r\n        type='text' \r\n        placeholder='Add Task' \r\n        value={text} \r\n        onChange={(e) => setText(e.target.value)} />\r\n      </div>\r\n      \r\n      <div className='form-control'>\r\n        <label>Day & Time</label>\r\n        <input \r\n        type='text' \r\n        placeholder='Add Date & Time' \r\n        value={day} \r\n        onChange={(e) => setDay(e.target.value)}/>\r\n      </div>\r\n\r\n      <div className='form-control form-control-check'>\r\n        <label>Set Reminder</label>\r\n        <input \r\n        type='checkbox' \r\n        checked={reminder} \r\n        value={reminder}\r\n        onChange={(e) => setReminder(e.target.checked)}\r\n        />\r\n      </div>\r\n\r\n      <input type='submit' value='Save Task' className='btn btn-block' text='Save Task'/>\r\n\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddTask;\r\n","\nimport {useState} from 'react'\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\n\nconst App = () => {\n\n    // state of app / APP STATE\n\n    const [showAddTask, setShowAddTask] = useState(true) // toggle state of inputs\n\n    const [tasks, setTasks] = useState([\n      {\n        id: 1,\n        day: 'Feb 5th at 14:00',\n        text: 'Call Office Support',\n        reminder: true,\n      },\n      {\n        id: 2,\n        day: 'Feb 10th at 22:00',\n        text: 'Roast The Beans',\n        reminder: false,\n      },\n      {\n        id: 3,\n        day: 'Feb 11th at 06:00',\n        text: 'Walk Dog',\n        reminder: false,\n      },\n  ])\n\n  // Add Task \n  const addTask = (task) => {\n    // im generating my own ID as we dont have a backend to genrate it\n\n    const id = Math.floor(Math.random() * 10000) +1 // this would be genrated by a backend for every new component\n\n    const newTask = {id, ...task}\n    setTasks([...tasks, newTask])\n  }\n\n\n  // Delete Task Function STATE\n\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id))\n  }\n\n  // Toggle reminder STATE\n\n  const toggleReminder = (id) => {\n    setTasks(\n      tasks.map((task) => task.id === id ? {...task, reminder: !task.reminder} : task))\n  }\n\n\n\n  return (\n    <div className=\"container\">\n      <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask} />\n      {showAddTask && <AddTask onAdd={addTask} />}\n      {tasks.length > 0 ? ( // 'if' turnary operator check\n        <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} />\n      ) : (\n        'No tasks!'\n      )}\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}